# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Daifu Ye
Student ID: 403910231
Email: daifu.ye@gmail.com

# Partner 2 (if you're working in a team)
Name: Tai Pham	
Student ID: 603897752
Email: taiducpham@ucla.edu

EXERCISE 1: What method you used to make your peer download and upload
    files in parallel?  (~1-3 sentences)
We use the conventinal fork() method, for each download, we fork() a new process to handle the download

EXERCISE 2A: What conditions did you find and fix that would have
    triggered a buffer overrun bug?  (~1-3 sentences each)
- We found a buffer oveflow if the file name is bigger than FILENAMESIZ, we fixed it by set the maximum filename length to be this value

EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
    each)
Other defense mechanism added for (more defense mechanism is added through the design problem "access control" by providing a .htaccess file)
	- requesting file outside of the current directory, we compare the current directory with the directory requested, make sure it's the same so peer don't try to attack by take some file outside of the desire directory
	- requesting invalid files or invalid directories, make sure that the file requested is exist so that peer don't try to exploit this
	- requesting files that have name too long, so that peer don't try to do an possible buffer overflow attack
	- protecting ours if a peer try to send big number of data by setting a max FILESIZE equal to 2GB
# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
Download Attack: In the (evil_mode == 1), at the beginning, it try to
attack peers with 'cat2.jpg', first, request the same file name many
times with valid file until other peers give up; however, we dont check
the file is good or not.  Also, it read the file into task buffer from
the victim peers without stopping. The victim peers will never finished
util they give up. Third, when (evil_mode == 3 and enable Extra Credit),
the evil peer will modified the md5 of the downloaded file and try again
until victim peers gave up.


Upload Attack: take advantage of overrun disk space of peer.
(evil_mode == 2) When the victim peer want to download the file, the
attacker will always reads from the beginning of the file, and the
victim peer will have to allocate space for the repeating data and its
disk space will overrun.


Extra credit problems
Extra credit problem: checksum
Please uncommented #define EXTRA at the top of osppeer.c to test this 
In this system, using create_md5 function to create md5 based on the file content.

That function is being call under two places:
1. when registering the files in the system
2. when finishing downloading the file, using create_md5 to check this file is valid or not from the server's record.


# Add any other information you'd like us to know below this line.
